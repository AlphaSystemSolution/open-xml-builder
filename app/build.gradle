import com.alphasystem.openxml.gradleplugin.CodeGenerator

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id("net.researchgate.release") version "3.0.2"
}

repositories {
    mavenLocal()
}

def generatedSrcDir = new File(buildDir, "generated/src/main/java")

sourceSets {
    main {
        java {
            srcDirs += generatedSrcDir
        }
    }
}

tasks.register('generateCode') {
    CodeGenerator.wmlGenerator(generatedSrcDir)
}

tasks.compileJava {
    dependsOn(generateCode)
}

dependencies {
    api "io.github.sfali23:commons:${asCommonsVersion}"
    api "org.docx4j:docx4j-core:${docx4jVersion}"
    api "org.docx4j:docx4j-export-fo:${docx4jVersion}"
    api "org.docx4j:docx4j-JAXB-MOXy:${docx4jVersion}"
    api "org.docx4j:docx4j-MOXy-JAXBContext:${moxyVersion}"
    api "org.eclipse.persistence:org.eclipse.persistence.moxy:${eclipseMoxyVersion}"
    api "org.docx4j:docx4j-JAXB-ReferenceImpl:${docx4jVersion}"
    api "org.slf4j:slf4j-api:${slf4jApiVersion}"
    api "ch.qos.logback:logback-classic:${logbackClassicVersion}"
    testImplementation "org.testng:testng:${testngVersion}"
    testImplementation "com.google.inject:guice:${guiceVersion}"
    testImplementation "org.uncommons:reportng:${reportngVersion}"

    // remove vulnerabilities
    api "commons-codec:commons-codec:${commonsCodecVersion}"
    api "org.apache.xmlgraphics:batik-bridge:${batikVersion}"
    api "org.apache.xmlgraphics:batik-script:${batikVersion}"
    api "org.apache.xmlgraphics:batik-transcoder:${batikVersion}"
    testImplementation "com.google.guava:guava:${guavaVersion}"
}

group = 'io.github.sfali23.docx4j'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

apply from: "${rootDir}/scripts/publish-root.gradle"

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
            pom {
                name = "AlphaSystemCommons"
                description = "Alpha system commons library"
                url = "https://github.com/AlphaSystemSolution/open-xml-builder"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'sfali23'
                        name = 'Farhan Syed Ali'
                        email = 'f.syed.ali@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/AlphaSystemSolution/open-xml-builder.git'
                    developerConnection = 'scm:git:ssh//github.com:AlphaSystemSolution/open-xml-builder.git'
                    url = 'https://github.com/AlphaSystemSolution/open-xml-builder'
                }
            }
        }
    }
}


tasks.withType(Test).configureEach {
    systemProperty 'docs.dir', "/Users/sfali/Library/Group Containers/UBF8T346G9.Office/SFA"
}

test {
    useTestNG() {
        suites "testng/testng.xml"
    }
}

